name: MDDOAI CI/CD

on:
  push:
    branches: [ main ]
  pull_request:

env:
  IMAGE_NAME: ghcr.io/uldiskk/mddoai
  IMAGE_TAG: ghcr.io/uldiskk/mddoai:1.0

jobs:
  gradle_build:
    name: Gradle Build
    runs-on: ubuntu-latest
    container: gradle:8.14.3-jdk21-alpine
    defaults:
      run:
        working-directory: main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean Gradle cache and daemon
        run: |
          rm -rf ~/.gradle/daemon ~/.gradle/caches
          ./gradlew --stop || true

      - name: Build and install distribution
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test installDist

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gradle-build
          path: main/build/

  docker_build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: gradle_build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: gradle-build
          path: main/build/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -f main/Dockerfile -t $IMAGE_TAG main

      - name: Save Docker image
        run: |
          docker save $IMAGE_TAG -o main/image.tar

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: main/image.tar

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    container: gradle:8.14.3-jdk21-alpine
    needs: gradle_build
    defaults:
      run:
        working-directory: main
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: gradle-build
          path: main/build/
      - run: chmod +x ./gradlew
      - run: ./gradlew test
      - uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: main/build/test-results/test/

  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    container: gradle:8.14.3-jdk21-alpine
    needs: gradle_build
    defaults:
      run:
        working-directory: main
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: gradle-build
          path: main/build/
      - run: chmod +x ./gradlew
      - run: ./gradlew integrationTest
      - uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: main/build/test-results/integrationTest/

  e2e_tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    container: gradle:8.14.3-jdk21-alpine
    needs: gradle_build
    defaults:
      run:
        working-directory: main
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: gradle-build
          path: main/build/
      - run: chmod +x ./gradlew
      - run: ./gradlew e2eTest
      - uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: main/build/test-results/e2eTest/

  cli_check:
    name: CLI Check (E2E)
    runs-on: ubuntu-latest
    needs: gradle_build
    defaults:
      run:
        working-directory: main
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: gradle-build
          path: main/build/
      - run: chmod +x ./cli
      - run: ./cli swarch2gitlab ./src/test/resources/testCases/e2e/input1.swarch ./test/generatedCode
      - run: chmod +x ../pipeline_tests/fileExistsTest.sh && ../pipeline_tests/fileExistsTest.sh
      - uses: actions/upload-artifact@v4
        with:
          name: cli-test-output
          path: main/test/

  coverage_report:
    name: Coverage Report
    runs-on: ubuntu-latest
    container: gradle:8.14.3-jdk21-alpine
    needs: [gradle_build, unit_tests, integration_tests, e2e_tests]
    defaults:
      run:
        working-directory: main
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: gradle-build
          path: main/build/
      - run: chmod +x ./gradlew
      - run: ./gradlew jacocoTestReport
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: main/build/reports/jacoco/test/html/

  deploy_pages:
    name: Upload Coverage to Pages
    runs-on: ubuntu-latest
    needs: coverage_report
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: public/
      - uses: actions/upload-pages-artifact@v3
        with:
          path: public/

  deploy:
    name: Deploy GitHub Pages
    runs-on: ubuntu-latest
    needs: deploy_pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write
      id-token: write
    steps:
      - uses: actions/deploy-pages@v4

  release_candidate:
    name: Release Candidate (Docker Push)
    runs-on: ubuntu-latest
    needs: docker_build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: main/
      - run: docker load -i main/image.tar
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push Docker image
        run: docker push $IMAGE_TAG
